#include "types.h"
#include "global_descriptor_table.h"
#include "interrupts.h"
#include "keyboard.h"


#define MAX 80


/*void print_start_page()
{
	int8_t initial_disp[2000]={0,0,0,0,0,0,0,0,0,0,0,0,0,'A',' ','S','m','a','l','l',' ','O','p','e','r','a','t','i','n','g',' ','S','y','s','t','e','m',' ','D','e','v','e','l','o','p','e','d',' ','B','y',' ','R','i','j','u',' ','G','h','o','s','h',',',' ','2','0','1','7',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,1,2,2,2,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,2,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,1,1,2,2,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,2,2,2,2,2,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,1,1,1,2,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,1,1,2,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,2,1,1,1,1,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,1,1,1,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,2,1,1,1,1,2,2,1,1,1,1,2,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,1,1,1,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,2,1,1,1,1,1,1,1,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,2,2,1,1,1,1,2,1,1,1,1,2,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,1,1,1,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,2,2,1,1,1,1,1,1,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,2,2,1,1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,1,1,1,2,2,2,2,1,1,2,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,2,2,2,1,1,1,1,1,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,2,2,2,1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,2,2,2,1,1,1,1,1,1,2,2,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,2,2,2,2,1,1,1,1,1,2,2,2,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,0,0,0,0,0,1,1,1,1,2,1,1,1,1,2,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,2,2,2,1,1,1,1,1,1,2,2,2,0,0,0,0,0,0,0,0,1,1,1,1,2,1,1,1,1,2,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,2,2,2,1,1,1,1,1,1,2,2,2,0,0,0,0,0,0,0,0,1,1,1,1,2,2,1,1,1,1,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,2,2,1,1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,1,1,1,1,2,2,1,1,1,1,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,2,2,1,1,1,1,1,1,1,1,2,2,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,1,1,1,1,2,0,0,0,2,1,1,1,1,1,1,1,1,1,1,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,1,1,1,1,2,2,1,1,1,1,2,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,1,1,1,1,2,0,0,0,2,2,1,1,1,1,1,1,1,1,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,1,1,1,1,2,2,1,1,1,1,2,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,2,2,2,1,1,1,1,1,1,2,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,2,2,2,2,1,1,1,1,2,2,2,2,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	uint16_t* video_memory=(uint16_t*)0xb8000;
	int32_t i;
	for(i=0;i<2000;i++)
	{
		if(initial_disp[i]==0 || initial_disp[i]==2)
			video_memory[i]=(video_memory[i] & 0x1100) | ' ';
		else if(initial_disp[i]==1)
			video_memory[i]=(video_memory[i] & 0x2200) | '#';
		else
			video_memory[i]=(video_memory[i] & 0xFF00) | initial_disp[i];
	}	
}*/

/*void print(int8_t*str)
{
	uint16_t* video_memory=(uint16_t*)0xb8000;
	int32_t i;
	for(i=0;str[i]!='\0';i++)
		video_memory[i]=(video_memory[i] & 0x1100) | str[i];
}*/

//                                                                                
// Hello! Welcome to Runix.                                                       
// ===============================================================================	
// This is a small operating system aimed at education.                           
// designed and developed by Riju Ghosh. MIT Licence.                             
// Acknowledgement : OSDev.org | wyoos.org                                        
// ===============================================================================
//   



void set_initial_print_buffer()
{

    static uint16_t* VideoMemory = (uint16_t*)0xb8000;

    uint16_t base_col=VideoMemory[0];	

    char str1[]="Hello! Welcome to Runix 1.0";
    char str2[]="This is a small operating system aimed at education.";
    char str3[]="designed and developed by Riju Ghosh. MIT Licence.";
    char str4[]="Acknowledgement : OSDev.org | wyoos.org";				
  
    uint16_t ptr=0,i;

    for(ptr=0;ptr<80;ptr++)
	VideoMemory[ptr]=' ';


    for(i=0;ptr<160;ptr++)
    {
	if(str1[i]!='\0')
	{
		VideoMemory[ptr]=(base_col & 0x3300) | str1[i];
		i++;
	}
	else
		VideoMemory[ptr]=(base_col & 0x3300) | ' ';		
    } 	
	

    for(;ptr<240;ptr++) 
	VideoMemory[ptr]=(base_col & 0x3300) | '=';


    for(i=0;ptr<320;ptr++)
    {
	if(str2[i]!='\0')
	{
		VideoMemory[ptr]=(base_col & 0x3300) | str2[i];
		i++;
	}
	else
		VideoMemory[ptr]=' ';	
    } 

    for(i=0;ptr<400;ptr++)
    {
	if(str3[i]!='\0')
	{
		VideoMemory[ptr]=(base_col & 0x3300) | str3[i];
		i++;
	}
	else
		VideoMemory[ptr]=' ';		
    } 	

    for(i=0;ptr<480;ptr++)
    {
	if(str4[i]!='\0')
	{
		VideoMemory[ptr]=(base_col & 0x3300) | str4[i];
		i++;
	}
	else
		VideoMemory[ptr]=' ';		
    } 	

    for(;ptr<560;ptr++) 
	VideoMemory[ptr]=(base_col & 0x3300) | '=';	


    for(;ptr<640;ptr++) 
	VideoMemory[ptr]=' ';	

}
                                                                            

void print_screen(char* str)
{
    static uint16_t* VideoMemory = (uint16_t*)0xb8000;
			
    static uint8_t x=0,y=8,i;

    for(i = 0; str[i] != '\0'; ++i)
    {
        switch(str[i])
        {
            case '\n':
                x = 0;
                y++;
                break;
            default:
                VideoMemory[80*y+x] = (VideoMemory[80*y+x] & 0xFF00) | str[i];
                x++;
                break;
        }

        if(x >= 80)
        {
            x = 0;
            y++;
        }

        if(y >= 25)
        {
            for(y = 8; y < 25; y++)
                for(x = 0; x < 80; x++)
                    VideoMemory[80*y+x] = (VideoMemory[80*y+x] & 0xFF00) | ' ';
            x = 0;
            y = 8;
        }
    }
}








typedef void (*constructor)();
extern "C" constructor start_ctors;
extern "C" constructor end_ctors;
extern "C" void callConstructors()
{
    for(constructor* i = &start_ctors; i != &end_ctors; i++)
        (*i)();
}



extern "C" void kernelMain(const void* multiboot_structure, uint32_t /*multiboot_magic*/)
{

    set_initial_print_buffer();	

    GlobalDescriptorTable gdt;
    InterruptManager interrupts(0x20, &gdt);
    KeyboardDriver keyboard(&interrupts);
    interrupts.Activate();

    while(1);
}
